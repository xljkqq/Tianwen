glibc堆机制学习
1. 主要工作
主要完成Linux下堆分配机制的相关知识学习。
1.1  完成ptmalloc源码的分析学习
这部分主要依据《glibc内存管理ptmalloc源代码分析》进行相关的学习。
1.1.1 fast bin相关机制
Fast bin的malloc机制相对简单：
1.获得fast bin 下对应索引idx
2.若对应idx下非空，则直接取head[LIFO]
3.判断取出的chunk大小是否为idx对应大小[在fast bin attack中需要控制size的原因]
4.若正常，则返回chunk
Free机制：[若与top chunk相邻则会与top chunk合并]
1.判断next_chunk->size是否小于fastbin_max
2.获取对应fast bin头结点head
3.检查head是否与p(free)一致[简单检查，防止double free，通过free(1) free(2) free(1)绕过]
4.头插法加入[p->fd = head, head = p]
1.1.2 small bin相关机制
malloc机制：
1.判断size是否在small bin范围内
2.获取size对应small bin idx的头结点head
3.若非空，则分配出head->bk(victim)[FIFO]，同时会检查victim->bk->fd == victim，防止double link。
4.若均正常，则对small bin链进行处理，并返回victim
1.1.3 malloc相关机制
接small bin malloc：
1.若fast bin、small bin分配机制均为分配成功，则首先获取large bin idx，同时检查是否存在fast bin，若存在，则调用malloc_consolidate释放fast bin
2.反向遍历unsorted bin[FIFO]，若链上只有唯一chunk且为last_remainder且last_remainder size足够，则对last_remainder进行切割。否则取出chunk，检查chunk->bk->fd == chunk[防止double link]，unlink(chunk)，若chunk大小恰好满足需求则分配出去，否则加入bins中。
3.到了这一步说明unsorted bin已经被处理完毕，如果申请的是large bin，在对应的large bin idx下找到第一个大于p的size链，若链上不唯一，则取第二个[减少链的处理]，否则直接对第一个进行unlink。对所取chunk进行分割，剩余部分若太小则设置为inuse，否则作为remainder加入unsorted bin。
4.若在该idx下没有找到满足需求的size链，则通过binmap快速遍历查找。
5.如果通过binmap找到了，首先检查对应内容是否为空，为空则说明binmap出错，置零对应binmap位后继续查找，直到找到满足需求的chunk，进行切割，如3中的切割操作一样。
6.还找不到，则开始考虑使用top chunk，首先判断size > av->system_mem，若是，则说明top_chunk也不够，将采用sysmalloc，否则将对top chunk进行切割。
1.1.4 free相关机制
接fast bin free：
1.检查是否为mmap分配的chunk，若是，将直接调用unmmap进行释放。
2.检查p是否为top_chunk和p的inuse状态，防止出问题。
3.检查p的pre_inuse，尝试进行合并。若可以合并将unlink prechunk。同时还会检查prechunk的nextchunk是否为p。[unlink时需要绕过的点]
4.检查next chunk是否为top chunk，若是的话与合并入top chunk，否则若next chunk空闲则一起合并并unlink next chunk。
5.将处理后的最终chunk加入unsorted bin。
6.检查最终chunk的size，如果超出阈值且存在fast bin，将调用malloc_consolidate并收缩阈值。
1.1.5 unlink相关机制
1. 首先通过检查p->size == p->nextchunk->presize，简单判断chunk是否合法[早期版本(2.23)没有]
2. 获取fd、bk，同时判断fd->bk == p && bk ->fd == p，作为合法性判断。
3. 双向链表操作删除链中p节点。fd->bk = bk;bk->fd = fd;[unlink的利用点]如果不是large bin到此已经结束了。
4. 对于large bin，首先通过检查p->fd_nextsize->bk_nextsize != p || p->bk_nextsize->fd_nextsize != p，防止double link。
5. 然后对nextchunk链也进行脱链处理。
1.1.6 malloc_consolidate相关机制
本质上就是遍历fast bin，对每个chunk进行free操作。[在合并中缺少了对size和fast bin idx的再检查，glibc2.31中补上了]
